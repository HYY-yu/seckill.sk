package repo

import (
	"context"
	"fmt"
	"gorm.io/gorm"

	"github.com/HYY-yu/seckill.sk/internal/service/sk/model"
)

// Code generated by gormt. DO NOT EDIT.

type _OrderMgr struct {
	*_BaseMgr
}

// OrderMgr open func
func OrderMgr(ctx context.Context, db *gorm.DB) *_OrderMgr {
	if db == nil {
		panic(fmt.Errorf("OrderMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(ctx)
	return &_OrderMgr{_BaseMgr: &_BaseMgr{DB: db.Table("order"), isRelated: globalIsRelated, ctx: ctx, cancel: cancel, timeout: -1}}
}

func (obj *_OrderMgr) WithSelects(idName string, selects ...string) *_OrderMgr {
	if len(selects) > 0 {
		if len(idName) > 0 {
			selects = append(selects, idName)
		}
		// 对Select进行去重
		selectMap := make(map[string]int, len(selects))
		for _, e := range selects {
			if _, ok := selectMap[e]; !ok {
				selectMap[e] = 1
			}
		}

		newSelects := make([]string, 0, len(selects))
		for k := range selectMap {
			if len(k) > 0 {
				newSelects = append(newSelects, k)
			}
		}
		obj.DB = obj.DB.Select(newSelects)
	}
	return obj
}

func (obj *_OrderMgr) WithOmit(omit ...string) *_OrderMgr {
	if len(omit) > 0 {
		obj.DB = obj.DB.Omit(omit...)
	}
	return obj
}

func (obj *_OrderMgr) WithOptions(opts ...Option) *_OrderMgr {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	obj.DB = obj.DB.Where(options.query)
	return obj
}

// GetTableName get sql table name.获取数据库名字
func (obj *_OrderMgr) GetTableName() string {
	return "order"
}

// Reset 重置gorm会话
func (obj *_OrderMgr) Reset() *_OrderMgr {
	obj.new()
	return obj
}

// Get 获取
func (obj *_OrderMgr) Get() (result model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Find(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_OrderMgr) Gets() (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Find(&results).Error

	return
}

func (obj *_OrderMgr) Count(count *int64) (tx *gorm.DB) {
	return obj.DB.WithContext(obj.ctx).Model(model.Order{}).Count(count)
}

func (obj *_OrderMgr) HasRecord() (bool, error) {
	var count int64
	err := obj.DB.WithContext(obj.ctx).Model(model.Order{}).Count(&count).Error
	if err != nil {
		return false, err
	}
	return count != 0, nil
}

// WithID id获取
func (obj *_OrderMgr) WithID(id int) Option {
	return optionFunc(func(o *options) { o.query["id"] = id })
}

// WithSecID sec_id获取
func (obj *_OrderMgr) WithSecID(secID int) Option {
	return optionFunc(func(o *options) { o.query["sec_id"] = secID })
}

// WithShopID shop_id获取
func (obj *_OrderMgr) WithShopID(shopID int) Option {
	return optionFunc(func(o *options) { o.query["shop_id"] = shopID })
}

// WithUserID user_id获取
func (obj *_OrderMgr) WithUserID(userID int) Option {
	return optionFunc(func(o *options) { o.query["user_id"] = userID })
}

// WithCreateTime create_time获取
func (obj *_OrderMgr) WithCreateTime(createTime int) Option {
	return optionFunc(func(o *options) { o.query["create_time"] = createTime })
}

// GetFromID 通过id获取内容
func (obj *_OrderMgr) GetFromID(id int) (result model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`id` = ?", id).Find(&result).Error

	return
}

// GetBatchFromID 批量查找
func (obj *_OrderMgr) GetBatchFromID(ids []int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`id` IN (?)", ids).Find(&results).Error

	return
}

// GetFromSecID 通过sec_id获取内容
func (obj *_OrderMgr) GetFromSecID(secID int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`sec_id` = ?", secID).Find(&results).Error

	return
}

// GetBatchFromSecID 批量查找
func (obj *_OrderMgr) GetBatchFromSecID(secIDs []int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`sec_id` IN (?)", secIDs).Find(&results).Error

	return
}

// GetFromShopID 通过shop_id获取内容
func (obj *_OrderMgr) GetFromShopID(shopID int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`shop_id` = ?", shopID).Find(&results).Error

	return
}

// GetBatchFromShopID 批量查找
func (obj *_OrderMgr) GetBatchFromShopID(shopIDs []int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`shop_id` IN (?)", shopIDs).Find(&results).Error

	return
}

// GetFromUserID 通过user_id获取内容
func (obj *_OrderMgr) GetFromUserID(userID int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`user_id` = ?", userID).Find(&results).Error

	return
}

// GetBatchFromUserID 批量查找
func (obj *_OrderMgr) GetBatchFromUserID(userIDs []int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`user_id` IN (?)", userIDs).Find(&results).Error

	return
}

// GetFromCreateTime 通过create_time获取内容
func (obj *_OrderMgr) GetFromCreateTime(createTime int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`create_time` = ?", createTime).Find(&results).Error

	return
}

// GetBatchFromCreateTime 批量查找
func (obj *_OrderMgr) GetBatchFromCreateTime(createTimes []int) (results []*model.Order, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Where("`create_time` IN (?)", createTimes).Find(&results).Error

	return
}

func (obj *_OrderMgr) CreateOrder(bean *model.Order) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Create(bean).Error

	return
}

func (obj *_OrderMgr) UpdateOrder(bean *model.Order) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(bean).Updates(bean).Error

	return
}

func (obj *_OrderMgr) DeleteOrder(bean *model.Order) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.Order{}).Delete(bean).Error

	return
}
